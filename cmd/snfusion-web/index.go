// Code generated by go-bindata.
// sources:
// rootfs/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x59\xff\x8e\x1b\xb7\x11\xfe\x7b\xf5\x14\x34\x83\x24\x12\xe4\x5d\xdd\x9d\x9d\xc0\xd0\xaf\xb4\x49\x9b\xd6\x6d\xea\x1a\x71\x8b\x02\xb5\x0f\x01\xb5\x4b\x49\xf4\x71\x97\x0b\x92\x2b\x9d\x6a\xdc\xbb\x77\x86\x5c\x4a\x5c\x9d\x74\xbe\x16\xc9\x19\x08\x6e\x49\x0e\xbf\x19\x0e\x67\xbe\x19\x2a\xd3\x67\x85\xca\xed\xae\xe6\x64\x6d\x4b\x39\xef\xf5\xa6\xed\xdf\x64\xba\xe6\xac\x98\xf7\x92\x64\x5a\x72\xcb\x48\xbe\x66\xda\x70\x3b\xa3\x8d\x5d\xa6\xaf\xe8\xc8\xad\x58\x61\x25\x9f\xbf\x6b\x6a\xae\xdf\xa8\x0d\xe3\xe4\xc7\xc6\x08\x55\x4d\x47\x7e\x61\xbf\xb9\x62\x25\x9f\xd1\x8d\xe0\xdb\x5a\x69\x4b\x49\xae\x2a\xcb\x2b\x00\xdb\x8a\xc2\xae\x67\x05\xdf\x88\x9c\xa7\x6e\xf0\x9c\x94\xa2\x12\x65\x53\xa6\x26\x67\x92\xcf\x2e\xb3\x8b\xe7\x04\x66\xac\x60\x32\x9e\x6a\x0c\xd7\x6e\xcc\x16\x30\xb5\xe3\x86\x12\x6f\x93\xc9\xb5\xa8\x2d\x31\x3a\x9f\xd1\xb5\xb5\xb5\x19\x8f\x46\x79\x51\x65\x9a\x6d\x57\xc2\x66\xb9\x2a\x47\x85\xda\x56\x52\xb1\x62\x54\x2b\xb9\x2b\x01\x07\xd6\x47\x97\xd9\x55\xf6\x22\xbb\x1a\x49\xb1\x18\x6d\xf9\x02\xe4\x6a\x55\x81\x91\xe6\xa3\xe9\x8e\xb3\x8f\x86\xce\xa7\x23\xaf\x07\x3c\x85\x4a\xa5\xa8\x6e\x88\xe6\x72\x46\x45\xe9\x8f\xb8\xd6\x7c\xf9\xff\x1b\xd0\xce\x87\xbf\x19\x5e\x4a\xeb\xf3\x5f\x5b\x95\xd0\xaa\x4a\x05\xdc\x88\x89\x3e\xbd\x42\xf2\x5b\x6a\xac\xea\xc6\x46\x9f\xbf\xa9\xc6\x9a\x41\x84\xa6\x8b\xc6\x5a\x55\x75\x06\x4f\xa0\xd5\x1f\x34\xfa\x7e\x02\x9d\xa6\x16\x55\x85\xe1\x13\x8f\x9e\x40\xaf\x55\xcc\xd8\xf8\xfb\x49\x74\x2a\xb9\x60\xba\x3b\x7a\x0a\x1f\xe7\x5a\x49\x99\x22\x4b\xc2\xa8\x66\x15\x97\xe7\x57\x9e\x22\xce\x20\x6f\xbb\x21\x1e\xcd\x3c\x85\x3f\xec\x4e\x72\x33\xca\x95\x54\x91\xfb\x1d\x23\xe3\x0a\x68\x3e\xeb\x1d\xf2\xa9\x47\xdc\xbf\x5a\x19\x20\x7a\x55\x8d\x09\x5b\x18\x25\x1b\xcb\x27\xed\x8a\x55\xf5\x98\x5c\x84\x91\x16\xab\xb5\x8d\xc6\x0b\x05\x87\x2c\xa3\x09\xc9\x97\x9d\x75\x96\xdf\xac\xb4\x6a\xaa\x22\x75\xf6\x8d\xc9\x86\xe9\x7e\x9a\x7a\x8b\x56\x9a\xef\xd2\xab\x0b\x28\x2a\x5f\x70\xce\x07\x7e\xd3\x5d\xcf\xfd\xe9\x44\xd5\xde\xce\x73\x78\x2b\xa5\x56\x92\xa7\x0b\xd9\xf0\xf4\x1b\x07\xf8\xf2\xea\xd5\x37\xcb\x97\x0f\x61\x66\xae\x56\xee\xa1\x4b\xa6\x57\x02\x1c\x70\x41\x5e\xd5\xb7\x27\xb6\x9d\x72\x5f\xd6\xd6\xd3\x83\x1f\x59\x51\x88\x6a\x35\x3e\x83\x11\x05\xc6\x7e\x4b\x70\x46\xb4\x06\x74\x75\x13\xce\xb7\x5d\x8b\x70\x19\x2d\x54\x66\x6a\x96\xf3\x83\x4f\x7e\xc7\xea\x5a\xee\xc0\x09\x92\xed\x54\x63\xd3\xa5\xe4\xb7\x87\x73\x27\x11\x01\xc2\x96\x24\x29\x84\xa9\x41\x72\x4c\x16\x52\xe5\x37\x93\x5e\x82\x42\x0b\x55\xec\xdc\xea\xfe\x00\x2f\x2f\xf0\x04\x6e\xb1\x10\x9b\xe8\xa0\x49\xe2\xda\x85\x31\xf9\xf6\xe2\xcb\x56\x20\xcb\x61\xc9\x59\x94\x24\xc1\x8d\xac\xb1\x6a\x72\x2c\x0c\x7a\x34\x78\x6f\x4c\x2e\xeb\x5b\x02\x71\x26\x8a\x49\xac\xf3\xf2\xa0\x33\xae\x15\xef\x35\x13\x86\x17\xd7\x99\x73\xc9\xb2\x91\x4e\xd1\xfd\x50\x68\xef\x1c\x21\xc3\xcc\x72\xb9\xf4\x80\xd0\x56\x8d\xda\x74\xe8\x85\x4e\x05\xbb\xaf\x19\xb5\xfc\xd6\x8e\x3e\xb2\x0d\xf3\xb3\x14\x04\x20\xa6\xc0\xba\xfc\x86\xcc\x48\xd5\x48\x39\x71\x13\x5b\xd3\x68\x01\x33\x74\x8b\xa9\xfa\xe9\x53\xf6\xfb\xa2\xd0\x77\x77\xa3\x82\x59\x46\xbd\x88\xa9\x96\xae\x0d\xfb\x45\x14\x20\x08\x49\xd0\x5b\x36\x55\x8e\x79\x45\x4c\xb3\x28\x85\xfd\x51\xe9\xb2\x2f\x8a\x81\xbb\x3b\xe8\xff\x9a\x12\x1c\x97\xad\xb8\xfd\xa3\xe4\xf8\xf9\xfd\xee\x75\xd1\xff\x3a\xc0\xa4\x7e\x53\xba\x84\x5d\xe9\xd7\x43\xd8\x97\xf9\x99\x3e\x5c\x2f\x9c\x69\x2b\x2a\xa0\x88\x4c\x39\x92\x00\x85\x41\x59\x1f\xf1\x13\xec\x26\x94\xe4\x99\x54\xab\x3e\xf5\x32\x14\xf6\xf5\x92\xbd\x4d\x7f\xe5\xbb\xb7\x9a\x1b\xd3\xe7\x6e\x43\x82\x47\xe0\x1b\xab\x16\x1f\x01\xac\x05\xe7\x1b\x30\xeb\x3b\xe2\xfe\x90\x31\xe1\xe8\x5c\xb1\x24\x7d\x2f\x97\xdd\xf0\xdd\x0f\xaa\xe0\x64\x36\x23\x97\x2f\xc8\x57\x5f\xb5\xfb\xb3\xdc\x6a\x09\xf0\x1e\x37\x09\x07\xfa\x13\xaf\xd0\xf4\x24\xb9\x73\x97\x92\xec\x3d\xa0\x2a\x00\x42\xba\x03\xc5\xc1\x2a\x34\x35\x5c\x02\xdf\x92\x7f\xf1\xc5\x3b\x18\x71\xdb\x77\x17\x31\x08\xcb\xb0\x57\xd5\xbc\xba\x77\xfc\xee\xf9\x61\x50\xf1\xdc\xf2\x02\xf8\x8c\x50\x32\x24\x01\xc4\x05\x5b\x8b\x93\x4b\x65\x78\x0c\xc4\xcf\x23\xa1\xff\x9c\x7c\x41\xfa\x88\xc7\x21\x38\xc1\x0f\x43\x42\x07\xf4\x08\xb6\x84\xc3\xb0\xd5\x29\x60\x74\xb8\xf7\xf6\x5f\xde\xfd\xfd\x4d\x56\x63\xa3\xdf\xe7\x19\x46\x94\x73\x13\xae\xbb\x50\x42\x97\xfa\x5c\x41\xdf\xc3\xd4\xb3\x59\x1c\x6c\xad\x9b\xa1\x45\xd7\xb6\x4f\x45\xb5\x61\x90\x59\x04\x7a\x67\xe3\x3c\x46\x10\x70\x0c\x48\x33\x0a\x41\x34\xa4\xcf\xc9\x96\xe1\x1b\x60\x18\x41\x0c\xe9\x33\x67\x77\x92\x68\x6e\x1b\x5d\xb9\x5b\x82\xff\xcc\x56\xd8\x7c\x4d\xfa\x60\xc1\x7b\x6a\x2c\x9c\x83\x5e\xb7\xea\x72\x06\xde\xa2\x2b\x5e\xa5\x05\xf4\xe7\x74\x8c\x73\xc9\xb9\xa0\xa6\x46\x94\xa1\x1f\xa2\x83\x8c\x81\x1f\x36\xce\x25\x4c\x1a\x17\x54\xfe\x68\x4e\x0d\xd7\x9a\x5e\xe3\x11\x31\xf9\x5a\x65\x0f\x21\x87\x74\x41\x53\x3a\x87\x1a\x64\x4e\xdf\x9f\xff\xf1\xb7\x9f\x82\x8f\x8d\xd5\x40\x35\x62\xb9\x8b\x54\xf9\x73\xbb\xe3\x46\x56\x94\x66\x75\xc2\x0a\xbc\x12\x64\x0c\x24\x82\x69\xad\x39\x71\xa4\x32\xfb\xe0\x68\x24\x05\xbf\xaf\x80\xfb\xb0\x08\x7e\xa0\x73\x3a\x39\xec\x01\xb4\xf6\x1e\xe1\x0b\x18\x5c\x42\x16\xd3\x0f\x55\xeb\xf3\x24\x81\x1c\x87\x8b\x75\xac\x41\x04\x99\xa2\x7c\x26\x79\xb5\xb2\x6b\x18\x0f\x87\xa0\x9f\x78\xc1\xc4\x69\x1f\xce\x50\xe2\xbd\xb8\xc6\x88\x9b\x2e\xf4\x5e\x97\x3f\xc4\x5e\x88\x4e\x47\x60\xe4\x9c\xfe\x4a\x2e\x44\xd8\xd8\x59\x0b\xcd\xd9\xcd\xe4\x10\x0c\xb5\x54\xf6\x71\xd1\x10\x14\xba\x1d\x0f\x68\xf4\x71\xb7\x81\xab\x98\x9c\xd4\xf8\x1f\x51\xc7\x0a\xd1\xd5\x50\xae\x60\xe3\xe7\x55\x6b\x8e\x3d\xd8\x91\xf2\xc9\x01\x46\xc6\x28\x39\xe8\xb5\xbc\x05\xea\x53\xa4\xe4\x70\x77\x85\xcc\x5c\x92\xd2\x93\xbc\x8d\xe4\xe0\x53\xd7\x49\xc2\xab\x7c\xad\x20\x11\xa1\xe1\xb2\x74\x3f\xcb\x1c\x2d\xf8\x46\xb0\x5b\x5c\xda\x16\xf0\xbb\xa5\x80\x28\xa3\x43\x5e\x21\xcd\xfc\xf3\xe7\xd7\x18\xa3\x19\x76\x8f\x91\x11\x91\xdb\x20\x36\xa3\x02\x4a\x7c\x01\x25\x48\x71\x22\xbf\x81\x68\x8d\xca\x91\xe7\x84\xc1\x07\x0a\x7c\xc6\x8c\x81\xc5\x50\x66\x61\x0a\x38\xe3\xc3\xe1\x5c\xc1\x9a\xf4\x88\x3a\x20\xd6\xff\xd0\x2e\x91\x7f\xbf\x7e\x8b\xf1\xd8\x7f\x27\xca\x46\x32\xc7\x93\x29\x69\x75\x4c\x3b\x4f\xc0\x10\xb3\xd8\x5e\x40\x0b\xc3\xab\xe2\x87\xb5\x90\x45\xbf\x90\x83\x09\xe9\x5e\xf6\x1d\x12\xea\x5d\xa7\x9e\xc6\x25\x05\x93\x33\x36\x68\x38\xe9\xfd\xcf\x44\x64\x75\x83\x3c\xe4\x6e\x1e\xe8\x12\x66\x30\xe3\xa9\x28\xe8\x38\xa6\xda\xe7\x38\x59\x35\xe5\x2f\xd0\x95\x69\x03\x6b\x6f\x9a\x72\xc1\x75\xff\xac\x3a\x90\x4d\xbd\xec\x20\x03\x5e\x6e\xf8\x60\x0f\x91\x33\xbd\x80\xd2\xf2\x48\x90\x20\xdd\x81\x31\x9c\x17\x8f\xd8\xef\xc4\xc2\x46\x57\x7a\x3b\x35\xcd\xd7\x07\x3a\x3c\x62\x48\x57\x87\x06\xc1\x29\xdd\xac\x3a\xca\x07\x58\x75\xe9\x80\x77\x79\x94\x0c\x21\xcd\x20\x0f\x22\x3f\xb6\xa2\x9d\x90\x5d\xeb\xf9\x74\x7d\x75\x14\x73\xa7\xb2\xd4\x45\x5c\x37\xc0\xba\xe8\x8e\x15\x47\xeb\x2b\x0c\x31\x6f\xfe\xca\xb5\x08\xe7\xcc\xaf\x9d\xf1\x20\x73\x6c\xbc\xe3\xc3\x2e\x76\x40\x44\xe6\xfa\x2c\x24\x0a\x1d\x63\x7a\xca\x3b\x06\xbd\x97\x06\xa0\x7a\x70\x62\x1a\x77\x0f\x82\x0d\x10\xcb\xe6\x51\x5c\x07\x82\xce\x1e\xdc\x00\x5e\x37\xd0\x28\x7c\xcf\x81\x9f\x78\x1f\xf0\x9f\x3b\x9c\x2c\x47\xfc\x37\x40\x2f\xe6\xfd\xc5\xf5\xa1\xbf\x32\xa0\xba\x7f\x26\x32\xee\x7a\xd1\xcf\x71\xd0\x61\xfb\x5f\x2e\xe1\xcb\xbd\x27\x9a\x0a\xfa\x38\x25\x37\xbc\xf0\xcf\xd1\xf3\xef\xa8\xa5\xb8\x6d\x85\x82\x54\xfb\x48\x9b\x3b\x1e\x98\xde\x7f\x3d\xe1\xf7\x8c\x32\xad\xd5\x36\xc5\x97\x00\xfe\x30\x78\x4f\xaa\xdd\x8d\xa1\xeb\xb9\x8d\xb6\x4f\x27\xf7\xf2\xa3\x73\x53\xa5\xcb\xf6\x77\x53\x90\xf9\x8c\x2e\xc3\x99\xce\xd7\x0f\xe9\x39\xb7\xb3\x04\x3f\xa7\x1b\x70\xf9\xf9\xcd\xd3\xd1\xd1\xb1\xbd\x2f\x22\xcb\xc3\x03\xac\x13\x9a\xd0\x31\xb2\xd2\xd0\xfb\xe7\xf4\x0f\xb2\x76\x21\x79\x2b\x39\x16\x4b\x53\xf3\x1c\x6e\x8f\xd8\x35\xc7\x1b\x0f\xd9\xe3\x40\x38\x52\x54\x96\x65\x7e\x03\x32\x78\xfb\x75\x16\x74\x7f\x5e\xf7\xb2\xc4\xe6\xf2\x40\x75\x44\xb2\x05\xfe\xcc\xf1\x05\x69\xc7\x8e\x79\x66\xf4\xf2\x02\xfe\x45\x5e\xc0\xad\x0f\xc2\x05\xd2\x0b\x80\x5f\x12\x3f\x43\x98\x55\xe5\x01\xf7\xdb\x47\x83\x3a\x26\x0c\x68\x7e\x10\x6c\xbb\x7a\xf1\xf2\x34\x4a\x14\x1d\xb1\x67\xbc\x3b\x8e\x34\x75\x0b\xee\xfe\xee\x7c\x41\xa5\xfb\x0a\x4c\x3b\xf5\x8b\x7a\xd3\xc2\xcd\x4a\x06\x55\x0e\x22\xed\x27\xf7\x37\xba\xaa\xa3\xfa\x19\x34\x2f\x8e\x8d\x68\xcb\x1b\x61\x12\xba\xfc\x9f\x9b\xaa\x82\xb4\x8d\x60\xe0\x9a\x5b\x8d\x51\x29\xdc\x9f\xbc\x9d\xd8\x43\x62\x00\x74\xcc\x43\x2e\xd9\xaf\xc6\xae\x19\xc5\x1e\x39\xac\xb4\x5f\xbd\x43\x94\x9f\xa0\x80\xb9\x7f\xa2\x23\x6f\xe0\x0b\x7d\xe4\xff\x67\xc8\x7f\x03\x00\x00\xff\xff\xa8\x2a\x2a\x03\x25\x19\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 6437, mode: os.FileMode(420), modTime: time.Unix(1461331115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

