package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _index_html_swp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9b\x5b\x8c\x24\x55\x19\xc7\x0f\x0b\xe8\x36\xbb\x5c\x02\x91\x44\xc5\x78\xa8\x0d\xd0\xc3\x6c\x57\xf5\xcc\x2e\x17\x67\xba\x87\x15\x50\x44\x60\x59\x5c\x64\x23\xbb\xb3\x6c\x75\xd5\xe9\xee\xb3\x53\x5d\xa7\x52\xe7\x54\xf7\x8c\xcb\xe0\x2d\xde\x1f\x56\x40\x82\x90\x08\x68\x34\xd1\x44\x9e\x7c\x80\x04\x30\xf1\x41\x1f\x34\x24\xf8\x22\xc4\x07\x49\x44\x2e\x46\x13\x7c\x30\xc1\x07\x45\xff\xe7\x54\x55\x77\x75\xcf\xce\xce\x62\x64\x78\xd8\xfa\x92\xdf\x54\xd5\xb9\x7c\xdf\x57\x5f\x7d\x55\x7d\xce\xa9\x9a\x56\xfd\xae\x9b\x6f\xa3\xd7\xd8\xbb\x09\xe4\x02\x42\x1e\x93\xcf\xdc\x75\xc1\x91\xc3\xe4\xf7\x57\x10\xd2\xe2\x21\x53\x64\x63\xf1\x82\x98\x87\x6d\x11\x79\xf5\x6b\x4e\xda\xee\x3e\xa3\xd0\xf1\x59\xdf\x09\xa4\x54\x8e\xe4\xbd\xa4\xd6\x4e\x24\x17\xa1\xd3\x11\x8e\x8c\x3d\xa7\xc3\x55\x37\x69\xd9\x9e\xe8\x39\xae\x54\xb1\xd0\xc5\x61\xd6\xc4\xeb\xf9\xc3\x83\xda\x80\xb5\x9c\x58\x08\xd5\x96\x0e\x0f\x7d\xb6\x6c\x77\x55\x2f\x38\x05\x5f\x4b\x29\xe5\xb4\x94\x44\xb5\x6b\xd7\x9e\x4b\x76\xcd\xce\xd4\xf5\xe1\x0e\xeb\x52\x7a\xd1\x85\x9f\x7d\xaf\xbd\x2a\xa5\x94\x52\x4a\x29\xa5\x94\x52\x4a\x29\xa5\x94\x52\x36\x51\x54\x74\x26\xf9\x02\xb6\x5b\xb2\xe3\x23\xd9\xf6\x8c\x89\xed\x59\xd9\x76\x47\xb6\xbd\x7b\xa2\xfe\xcc\x6c\x7b\x63\xb6\xbd\x77\xa2\xbe\x94\x52\x4a\x29\xa5\x94\x52\x4a\x29\xa5\x94\x52\x4a\x29\xa5\x94\x52\x4a\x79\xef\xc4\xf5\x09\xf9\x22\x26\xef\x97\x9c\x4d\xcc\xfb\xff\x23\x59\xf9\xdf\xcf\x27\xe4\x4d\xf0\x06\x78\x1d\xbc\x0c\x7e\x05\x7e\x08\x66\xc0\x2f\xce\x23\xe4\x39\xf0\x2c\xb8\x03\xbc\x7c\x2e\x21\x3d\xf0\xd6\x76\x42\xbe\x02\xb6\x81\x87\xb7\x11\xf2\x51\x70\xfc\x1c\x42\xce\x07\x4f\x54\x08\x79\x1c\x3c\x04\x96\xc1\x61\xb0\x0f\xec\x01\x0e\xa0\xe0\xaf\x5b\x09\x79\x15\xfc\x19\xbc\x00\x1e\x06\xf7\x83\xef\x80\x04\x1c\x01\x77\x83\xcf\x81\x3a\xb8\x04\x5c\x0c\x3e\x00\xfe\xfd\x7e\x42\x7e\x07\x7e\x0b\x7e\x03\x9e\x05\x8f\x83\x47\xc0\xf7\xc0\x37\xc1\x00\x28\x20\xc1\x12\xb8\x1b\x1c\x00\x77\x81\x9b\xc0\xc7\xc0\xd5\xe0\x2a\x70\x25\xf8\x10\xd8\x0e\xde\x7a\x1f\x21\xaf\x81\x57\xc0\x9f\xc0\x2f\xc1\x8f\xc0\x43\xe0\x01\xf0\x75\xf0\x35\xd0\x06\x0c\xdc\x09\x66\xc0\x25\xe0\xc3\xe0\x6d\xc4\xf7\x35\xf0\x2a\x78\x1e\xfc\x18\x24\xc0\x03\x87\xc1\x41\x30\x0f\xe6\xce\x4e\xaf\xc5\xbf\xce\x22\xe4\x9f\xe0\x25\xf0\x22\xf8\x01\x78\x0c\x3c\x0a\xee\x07\x11\x38\x00\x76\x81\x59\xf0\x53\x5c\xc3\x04\xdc\x01\xaa\xa0\x02\xb6\x80\xbf\x6d\x41\xdc\xc1\xa3\xe0\x38\xf8\x3c\xa8\x82\x8f\x80\x0f\x82\x8b\xc1\x45\xe0\xc2\x2d\xc3\x94\x58\x9d\x27\x95\x55\x52\x31\x54\x2a\xad\x98\xb9\x4b\xf3\x66\xd7\x17\x5e\xd2\x63\xa1\xb2\x3b\x4c\x7d\x22\x60\x7a\xf7\xfa\x95\x9b\xfd\xaa\x35\xfc\x2a\x23\x0a\x84\xaa\x59\xd3\xf9\xf1\x3d\xdc\x9f\xb2\x79\x18\xb2\xf8\x53\x77\xde\x76\x2b\x6d\x52\xd1\x3a\x7a\xd0\x92\xfd\x8e\xb5\x68\x34\x7a\xae\x64\xd4\x32\x9d\x7c\x11\x32\x6b\x6e\xd2\x62\xea\xc2\x29\x18\xee\xb0\xf0\x64\x76\x15\x5b\x56\xa9\xc6\x8a\xde\xa5\xd3\x4d\x6a\x35\x9c\x28\x66\x0b\x56\x5a\x9a\x19\x1a\xd6\xf6\x64\xe7\x20\x5f\xa4\xd3\x68\xd6\x8a\x17\xac\xac\x6f\x5b\xc4\xb4\xca\xa1\xaf\x3e\x4f\x39\x6d\xe8\x56\x76\xc0\xc2\x8e\xea\xe2\x78\x7a\x7a\x8a\x1e\xa3\x69\xc3\xbe\x1b\xeb\xca\xf4\x8c\x6d\xdd\x4c\x46\x01\x57\x55\xeb\x50\x68\x4d\xcd\x8f\xda\x18\x73\xda\x17\xb8\x42\xa5\x5a\x09\x58\xf3\x90\xa5\x0b\x6b\x6e\xc0\x3b\xe1\x1c\x0d\x58\x5b\x1d\xb2\x72\x07\x78\x9b\x56\x4d\x08\xa1\xd1\x5a\xa4\x97\x36\x69\x98\x04\x01\xcc\xfe\x5f\x83\xf5\xe9\xfd\xb7\xef\xb5\x2b\x15\x37\x60\x31\x3c\x5e\x62\x2b\xbe\x18\xc0\x15\x0b\xd1\x60\x7d\x85\x9a\x75\xab\x50\x70\x83\xf0\x99\x39\xc3\x75\xda\x6c\xd8\x79\xd8\x40\xef\x80\x53\xb3\x86\x63\x78\xae\xff\xde\x7b\x2f\x1d\xf0\x70\x43\x27\x8d\x76\x29\xbc\x25\x74\x0b\xd9\x80\x1e\x60\xad\xfd\x38\x62\xaa\x3a\x90\x49\xcc\xa1\x14\x5a\x37\xa8\x1f\x46\x5a\x84\x99\x15\x34\xbe\x85\xad\xec\x8b\x99\x94\xf9\x4d\x64\xae\x5c\x1e\xeb\x9b\x58\x58\x35\xfe\xea\x2b\x09\x67\x74\x76\x64\xa7\x41\x9b\x4d\x3a\xb3\x8b\x5e\x7e\x39\xcd\xca\x3d\x15\x07\x50\x96\x5e\x5d\x9d\x2c\x69\x39\x4c\xe0\xfc\x60\xcc\x66\x7d\xd8\xbe\x8e\x9a\x0d\x9d\xa3\x0c\x7a\xdb\x49\xe8\x29\xd8\x19\x7a\x51\x65\xba\x3f\xa9\x78\x22\x94\x22\x60\x76\x20\x3a\x55\x4b\x84\x81\x70\x7d\x9d\x88\x99\xa6\xb4\x00\x9a\xf3\xfe\x55\xd3\x4b\x1b\x2d\x64\x89\xc9\x7b\x53\x68\x42\xa0\xf3\x76\x20\xe7\x1c\xe7\xd8\x31\xfb\xe3\xbe\x1f\xaf\xae\x3a\xbe\xab\x5c\x2b\x6d\x92\x87\x0e\xf9\x89\x50\x35\xa4\x17\xf3\x48\x51\xb5\x12\xb1\xa6\x49\x70\xe7\xa8\xdb\x77\xd3\x52\x6b\x41\xc7\xba\xe1\x98\xfc\x5f\x48\xc3\xe6\x89\x40\xc4\x73\x74\x47\xbb\xdd\xd6\xe1\x6a\xb9\xde\x52\x27\x16\x49\xe8\xd7\xf2\x9a\xdd\xb3\xd7\x5e\xd5\xde\x8d\xca\xc8\x8d\x58\x5c\x6b\x25\x4a\x89\xf0\x60\xec\x72\xc9\xfc\x45\xdb\xb4\x6a\x27\x81\x39\x79\xad\x30\x72\x7d\x9f\x87\x9d\x39\x3a\x53\x8f\x96\x8d\x4a\x11\xfb\x0c\x8a\x66\xa2\x65\x38\x1b\x70\x5f\x17\x0e\xb8\xaf\xba\x73\xf4\xea\xfa\x65\xfa\xa8\xe7\xc6\x1d\x8e\xcc\x71\x13\x25\x70\x6c\x7b\x08\x34\x8b\x87\x2a\xc7\x1a\xfb\xbc\x0f\xa3\xa8\xc7\xb5\x58\x63\x73\x77\x6a\xb3\x25\xfc\x95\x61\xa5\xcf\xf1\x48\x70\x57\xe6\x68\x2b\x40\xa8\x86\xe7\xc1\xc3\x28\x31\x1a\x28\x64\xd5\xfc\xa5\x74\x8f\x1b\x45\xc1\x4a\xb5\x56\x43\x07\x91\xa8\x5a\x3b\x60\xcb\xb8\x7a\xba\x0a\x0f\x16\xd7\x4b\x9d\x2a\xf6\xa8\xd5\x32\x75\xf0\x29\x8b\x0d\x54\x2f\xe5\xd1\x1b\x74\xb9\x62\xa9\x82\x35\xed\x26\x55\x0d\xcf\xe2\x5a\x7d\x12\xa3\x2e\xb8\x78\x22\x08\x6a\x5d\xe6\x22\x8e\x30\x17\xb2\x80\x16\x43\x50\xd4\x91\x47\xb2\x3e\xa9\x44\x09\x11\xb4\x90\x2e\xb6\xe2\x2a\x60\x93\xdd\xd6\x5e\x76\xa4\x16\xc2\xd0\x11\xa2\x13\xb0\x5a\x2b\x48\x58\xed\xaa\x7a\x7d\x67\x9e\x0d\x53\x27\x52\x7d\x8a\x3a\xd3\x4e\x9d\x98\xad\xd4\x66\x8d\x4a\xc6\x58\xa6\x8f\x9a\xc7\xf0\x9c\xce\xfe\x4c\x87\x40\xa0\x7a\x85\x82\x98\x77\xba\xc5\x06\x4a\x44\x85\xa3\x48\x48\xae\xef\x2a\x64\x52\x0b\xa9\x96\xe8\xd0\x57\xd6\x0f\xa2\xbe\xdf\x1b\xd9\xcd\xa0\x77\x03\x5c\x38\x1a\xb3\xa0\x69\xf1\x5e\x24\x62\x65\xd1\x6e\xcc\xda\x4d\xab\xab\x54\xa4\xef\x3f\xcf\x0f\xed\xd8\x1d\x74\xb8\x32\xdf\x4d\xea\xe7\x90\xbe\x9d\x9d\x48\x04\x2b\x3d\x68\x45\xbd\x33\x63\xcf\xda\xbb\xec\x59\x27\xe0\x2d\x27\xb3\xac\x0d\x48\xc7\xc4\xc0\x7c\x3c\x69\x51\x67\xe1\xdd\x33\x57\x48\xb0\xb5\x25\x9b\x60\xff\x04\x81\x5e\xbf\x66\x13\xfc\xc9\xb2\x73\xfc\x68\x53\xec\xba\x52\x15\xf7\x37\x23\xf6\x91\x19\x5e\x8c\x1f\x6d\x46\xce\xe9\x67\x69\x71\x7f\x13\x6c\x8e\xa5\xf8\x26\x64\x37\x8f\xcd\x93\x5d\x9f\xe8\x68\x77\x13\x2c\xea\x01\x45\x61\xf7\xdd\x8d\x6c\x5a\x9e\x6f\x53\x5b\x30\x65\x9e\x8e\xd9\xc8\x42\xc6\xde\xff\x6e\x60\xc0\x5a\x68\x17\x61\x0a\x12\x2a\x79\x54\x8e\x1f\xdb\x47\xa5\xb5\x80\xd1\x89\xb1\x63\xce\xaf\xc7\x94\x4b\x43\xb7\x87\xa1\x4c\x9f\xb3\x41\x7a\x8a\xd9\x2f\x5f\xd3\x32\xc3\x82\xa6\xcf\xfa\xdc\x63\x35\x73\xb0\x93\xf6\x78\xc8\x7b\x49\x0f\xcf\x1a\x8c\x4a\x9b\x33\x36\x7e\x5f\x50\xa2\xb8\x1b\x14\x8b\x12\x69\x1e\x47\x6e\xe0\xb6\x50\xb4\xc2\x64\x1e\x50\xf3\xe3\xb8\xb0\x3f\x41\x4e\xed\x15\x7d\x97\xd1\x4f\x9a\x31\x59\xc3\x49\x2b\x86\x3e\x79\x5d\x37\x96\x0c\x3e\x98\x8f\x7d\x75\x88\x2a\x0d\xfd\x5c\x43\xa8\x1a\x3a\x68\x7a\x7b\x29\x46\xad\x7a\x18\x46\xd3\x02\x3d\xff\x7f\x1b\xf3\xd3\x2b\xb7\xa6\xf3\xff\xfc\xfd\xbd\x9e\xf3\xbf\x08\x9e\x00\x0f\x80\xdb\xc1\x56\xf0\x02\xe6\xfa\xcf\x83\x27\x40\x1f\xdc\x02\x5e\xc3\xbc\xff\x55\xf0\x1c\xf8\x2e\x78\x10\x1c\x05\xd7\x81\x2a\xb8\x00\x9c\x0f\xfe\xb0\x9d\x90\x27\xc1\xcf\xc0\xb7\xc0\x37\xc0\x7d\x60\x15\x28\x20\xc1\x11\x70\x0f\x98\x07\x73\xe0\x0a\xf0\x97\x6d\x84\x3c\x03\xbe\x04\x6e\x04\x75\xe0\x00\x1b\x9c\x01\xde\x38\x87\x90\xa7\xc0\x93\xe0\x41\x70\x23\x78\xb3\x82\x39\x31\xf8\x3e\x78\x10\x7c\x15\x6c\xab\xe8\x94\x41\x3b\x9c\xeb\x71\xf0\x65\x20\x41\x17\x1c\x06\x8b\x60\x01\x34\x41\x03\xec\x02\xb3\x5b\xd3\xd8\xe8\xf2\x52\x4a\x29\xa5\x94\x52\x4a\x39\xfd\xa4\xe1\x64\x43\x88\x4a\xc3\xd1\x2b\x19\xd9\xf8\x6b\xfd\x59\x94\x99\xbd\xa2\x81\xcf\xfb\x0b\x66\x69\xb2\xb0\x8b\xfd\x74\x35\x25\x3b\x1c\xab\xab\x34\xb0\x4f\xb9\xdf\x1c\x2d\x59\x4a\xde\xb3\x86\xb5\x63\xf3\x08\xea\x06\x18\xf0\x7c\x26\x09\x43\x1e\x76\xa8\xfe\x97\xc2\xc0\xd5\x93\x6d\xdb\xb6\xad\x54\x07\xef\xe5\x6d\xf5\x38\x6e\xac\xf3\x50\x65\x2b\x9e\xd0\x9e\xad\x85\xa4\xeb\x49\xd4\x0b\x5c\x29\x9b\x56\xbe\xaa\x64\x51\x11\x7a\x01\xf7\x96\x46\x1e\x9a\x95\x3d\x6b\xdc\xe9\xc0\x4d\x42\xaf\x6b\x2d\xdc\x6a\xb6\x05\xdf\x1a\x63\xf3\x83\x3c\x22\x63\x01\x19\x79\x34\x1e\x99\xe2\x2a\x91\x31\xc6\x98\x6f\x51\x8c\x18\xf5\x70\x3b\x3d\xe8\xbb\x41\x82\xa1\xe9\xcc\xec\xae\xdd\xa3\x13\x36\x3d\xd6\xd5\x12\x62\x6c\xea\xb9\x71\x0b\x23\xf9\xa1\xb2\xcb\x68\x5a\x42\x5d\x25\x7a\x72\xa8\xf6\xea\xfa\x3b\x51\xca\x71\x46\x23\x95\x3b\x68\x76\x9c\xbb\x58\x87\x9c\x58\x9d\x49\x81\x3c\xec\x26\x30\xd6\x9a\xc8\xec\x0b\x98\x7e\x81\x20\x23\xe6\xf1\xf6\x0a\x55\x5d\x56\x88\x31\x8d\xdc\x18\x43\x74\x6d\x0f\xa9\x40\x4e\xa6\x73\xac\x3c\x5b\xc0\x1a\x5b\x2c\x37\xaa\xa4\x95\x66\xfc\x30\xe5\xb3\x49\x7b\x96\xdb\x6b\xd7\xd1\xf4\x7e\xd3\xea\x89\x98\xd5\xfa\x0c\x53\x84\xd1\x79\x8e\x1a\x6d\xd0\x59\x32\x37\xd6\x19\xb4\x7e\xcf\x82\xeb\xd9\x4a\xa0\x99\x13\x58\x0b\x32\xcc\xfe\xb5\xb6\x78\x03\xae\x67\xc7\x8d\x63\x31\xa8\xe9\xa5\xb1\xf5\x6d\x35\x26\xce\x9a\x8c\xee\xc4\x13\x2c\x62\xb5\xf9\x32\xf3\xcd\xc3\xc2\xac\x7a\x26\x61\xcc\xa4\x08\xfa\x59\x99\x93\xcf\x4a\x86\xd3\xaa\x55\x62\x56\xdb\x6d\xc9\x42\xbf\x6a\xde\x40\x48\x15\xe3\x8e\xc6\x85\xad\xea\x65\xe5\x29\xb3\xe2\x8e\xcb\x2b\x6d\x1e\x62\x9e\xa4\xae\x67\x6d\x44\xb6\x8a\x73\xdb\x49\x4d\xb1\xd7\xe5\x81\xbf\x57\xf8\x4c\x1e\xac\x2f\xea\x45\x76\xb3\x0c\x8d\x1a\xda\xa4\x1b\xbf\x13\xd1\x0f\x98\x74\x51\x9f\xf7\x6d\x37\x8a\xe0\xc6\x0d\x5a\x61\x55\xbf\x9d\x9a\x9a\x5f\x5b\x8e\xbc\xd0\xc5\xba\xda\x36\x6b\xe3\x93\x6f\xc1\xe8\x74\x71\xf1\x3c\xf3\x47\x57\x15\xfd\xf1\x62\xe6\x2a\x96\xb9\x54\xb5\xa2\xd4\x07\xe8\x9e\xd4\x69\xde\xd9\x9c\x50\x25\x6a\x36\xd6\xa8\xbd\x2f\xbe\xe3\xb1\x1a\xdd\x59\x7d\x93\x1e\x1a\x59\x88\x99\x9e\xc8\x8e\xbf\x18\x9a\xb6\x0e\x59\x0b\xfb\x47\xf7\x54\x8d\x4e\xf8\x60\xde\x90\x39\xdd\x59\xf3\x86\xca\x18\x19\x77\x3b\x57\x3a\xde\x2b\x75\x5c\xa7\xee\xfa\x8e\xa3\xd6\xbc\x2a\x1b\x7b\x73\xa1\x33\x61\x8e\x5a\xd3\xeb\x24\x88\x59\x58\x4f\x9f\x82\x73\x74\x6f\xd2\x6b\xb1\xb8\xba\xfe\xa5\xd7\xcd\xa6\x6c\xf3\x28\x9a\xd2\xfd\xf0\xbc\xba\x27\x7f\x08\x6e\xdc\xbd\xf8\xc8\xcc\xb5\xec\xcc\xd5\xa4\x8f\xb9\x53\x53\x92\xb6\x2d\xa8\x30\xb1\xc1\x19\x21\x38\xc7\xc8\x49\x5e\xe7\x15\x7e\xd7\xa6\x6c\xd7\x53\xbc\xcf\xf4\xab\xce\x38\xd1\xcb\xcb\xc5\x8b\x38\x3d\x4f\x86\x2f\x86\xc6\x7e\xaf\xa0\x5f\xcf\xff\x7f\x82\x39\xf4\x3e\xcc\xb3\xf5\xfc\x3f\xff\xbe\xff\x3f\x98\xeb\xbf\x02\x9e\x01\x4f\x83\xa7\xc0\x23\xc0\x07\x2e\x38\x02\xf6\x00\x0a\xfe\x71\x1e\xe6\xf6\xe0\xd7\xe0\xdb\xa0\x07\xb6\x81\xb3\xc1\xeb\x98\xf7\xff\x1c\x1c\x07\x6d\x70\x13\xd8\x03\xae\x04\x7f\x84\xcd\x97\xc0\xf3\xe0\x69\xd0\x06\x07\xc1\x01\x70\x27\xb8\x63\x7b\xea\xd7\x2c\x98\x01\xb5\xed\xef\xdd\xe8\xa7\x94\x52\x4a\x29\xa5\x94\x52\x4a\x29\xa5\x94\x52\x4e\x3f\x59\x9d\x27\x1b\x7c\x1f\x5a\x7e\x3d\x5a\x7e\x3d\x5a\x9c\x9a\x1b\x83\x2c\x8e\xad\xc5\xa9\x09\x2f\x4c\xe1\xa4\x17\xef\x74\xb6\xdb\x76\x03\xc9\x0a\xd9\xa0\x9d\x1b\x26\x83\x1c\x70\xe5\x75\x33\x73\x52\xb9\x1d\x06\x2f\x8c\xa1\xb1\x45\x85\x8e\x50\x27\x58\x53\x40\x27\xb3\xa4\x60\x22\x9d\x7e\x77\x69\x5a\x44\xfa\x15\x7b\x95\xd9\x66\xcd\x61\x3e\x5b\xb5\x12\x61\x8f\x49\x09\x03\xc5\x6f\x28\xb3\x4f\x2f\x57\x27\xed\xe1\x20\x64\xe9\x6c\xdc\x0b\x84\x5e\x5e\xae\x9a\x6f\x53\x6d\x4f\x7f\x06\x8a\xa4\x99\xb2\x0a\x8a\x4d\x93\x77\xa0\x16\xea\x94\x30\xcb\x34\xf9\x87\xaa\xb9\x26\x11\x99\x95\xa2\xf1\x6f\x3c\xff\x1b\x00\x00\xff\xff\x9a\xc3\x07\xf3\x00\x50\x00\x00")

func index_html_swp_bytes() ([]byte, error) {
	return bindata_read(
		_index_html_swp,
		".index.html.swp",
	)
}

func index_html_swp() (*asset, error) {
	bytes, err := index_html_swp_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: ".index.html.swp", size: 20480, mode: os.FileMode(420), modTime: time.Unix(1455126074, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x5f\x6f\xe3\x36\x12\x7f\x96\x3f\x05\xcb\xa2\x85\x0d\xaf\xa4\x24\xbb\x2d\x16\xb6\x95\xbb\x6b\x71\xff\x7b\x7b\xc5\xed\x01\xf7\xb0\x1b\x14\x94\x34\x96\xb9\xa1\x44\x81\xa4\xec\x18\x8b\x7c\xf7\x1b\x92\x92\x4d\x39\x71\x9a\x3b\x74\xe3\x17\x89\xe4\xcc\x6f\xfe\x0f\xc7\x5a\x7d\x55\xca\xc2\xec\x5b\x20\x1b\x53\x8b\xeb\xc9\x64\xd5\x3f\xa3\xd5\x06\x58\x79\x3d\x89\xa2\x55\x0d\x86\x91\x62\xc3\x94\x06\x93\xd1\xce\xac\xe3\xb7\x34\x75\x27\x86\x1b\x01\xd7\xef\xbb\x16\xd4\x3b\xb9\x65\x40\xfe\xd4\x69\x2e\x9b\x55\xea\x0f\x0e\xcc\x0d\xab\x21\xa3\x5b\x0e\xbb\x56\x2a\x43\x49\x21\x1b\x03\x0d\x82\xed\x78\x69\x36\x59\x09\x5b\x5e\x40\xec\x16\xaf\x48\xcd\x1b\x5e\x77\x75\xac\x0b\x26\x20\xbb\x4c\x2e\x5e\x11\xdc\x31\x9c\x89\x70\xab\xd3\xa0\xdc\x9a\xe5\xb8\xb5\x07\x4d\x89\xd7\x49\x17\x8a\xb7\x86\x68\x55\x64\x74\x63\x4c\xab\x17\x69\x5a\x94\x4d\xa2\xd8\xae\xe2\x26\x29\x64\x9d\x96\x72\xd7\x08\xc9\xca\xb4\x95\x62\x5f\x23\x0e\x9e\xa7\x97\xc9\x55\xf2\x3a\xb9\x4a\x05\xcf\xd3\x1d\xe4\x48\xd7\xca\x06\x95\xd4\x9f\xf4\x78\x9d\x7c\xd2\xf4\x7a\x95\x7a\x39\xe8\x29\x2b\x54\xf0\xe6\x96\x28\x10\x19\xe5\xb5\x37\x71\xa3\x60\xfd\xff\x2b\xd0\xef\x0f\xcf\xc4\x06\xa5\xf7\xf9\x6f\x2d\x8a\x2b\xd9\xc4\x1c\x23\xa2\x83\x57\x2f\x90\x7c\x49\x89\x4d\xdb\x99\xe0\xf5\x8b\x4a\x6c\x19\x66\x68\x9c\x77\xc6\xc8\x66\xb4\x78\x01\xa9\xde\xd0\xe0\xfd\x05\x64\xea\x96\x37\x8d\x4d\x9f\x70\xf5\x02\x72\x8d\x64\xda\x84\xef\x2f\x22\x53\x8a\x9c\xa9\xf1\xea\x25\x7c\x5c\x28\x29\x44\x6c\xbb\x24\xae\x5a\xd6\x80\x38\x7f\xf2\x12\x79\x86\x75\x3b\x4e\xf1\x60\xe7\x25\xfc\x61\xf6\x02\x74\x5a\x48\x21\x03\xf7\xbb\x8e\x6c\x4f\x50\xf2\x59\xef\x90\xcf\x13\xe2\x7e\xad\xd4\xd8\xe8\x65\xb3\x20\x2c\xd7\x52\x74\x06\x96\xfd\x89\x91\xed\x82\x5c\x0c\x2b\xc5\xab\x8d\x09\xd6\xb9\x44\x23\xeb\x60\x43\xc0\x7a\x74\xce\x8a\xdb\x4a\xc9\xae\x29\x63\xa7\xdf\x82\x6c\x99\x9a\xc6\xb1\xd7\xa8\x52\xb0\x8f\xaf\x2e\xf0\x52\xf9\x1a\x00\x66\x9e\xe9\x7e\xe2\x1e\xa3\xac\x3a\xe8\x79\x0e\xaf\x92\xb2\x12\x10\xe7\xa2\x83\xf8\x3b\x07\xf8\xe6\xea\xed\x77\xeb\x37\x4f\x61\x26\xee\xae\x3c\x40\xd7\x4c\x55\x1c\x1d\x70\x41\xde\xb6\x77\x8f\xb0\x3d\xe6\xbe\xa4\xbf\x4f\x8f\x7e\x64\x65\xc9\x9b\x6a\x71\x06\x23\x48\x8c\x03\xcb\xe0\x8c\xe0\x0c\xdb\xd5\xed\x60\xdf\x6e\xc3\x87\x60\xf4\x50\x89\x6e\x59\x01\x47\x9f\xfc\x9e\xb5\xad\xd8\xa3\x13\x04\xdb\xcb\xce\xc4\x6b\x01\x77\x47\xbb\xa3\xa0\x01\x22\x4b\x14\x95\x5c\xb7\x48\xb9\x20\xb9\x90\xc5\xed\x72\x12\x59\xa2\x5c\x96\x7b\x77\x7a\x30\xe0\xcd\x85\xb5\xc0\x1d\x96\x7c\x1b\x18\x1a\x45\x6e\x5c\x58\x90\xef\x2f\xbe\xe9\x09\x92\x02\x8f\x9c\x46\x51\x34\xb8\x91\x75\x46\x2e\x4f\x89\x51\x8e\x42\xef\x2d\xc8\x65\x7b\x47\x30\xcf\x78\xb9\x0c\x65\x5e\x1e\x65\x86\x77\xc5\x07\xc5\xb8\x86\xf2\x26\x71\x2e\x59\x77\xc2\x09\x7a\x98\x0a\x7d\xcc\x2d\xe4\xb0\xb3\x5e\xaf\x1d\x20\x16\x43\xda\x57\xc3\x64\x18\x54\xec\xf0\x95\x51\x03\x77\x26\xfd\xc4\xb6\xcc\xef\x52\x24\xc0\x94\x42\xe5\x8a\x5b\x92\x91\xa6\x13\x62\xe9\x36\x76\xba\x53\x1c\x77\xe8\xce\x56\xea\xe7\xcf\xc9\x1f\xca\x52\xdd\xdf\xa7\x25\x33\x8c\x7a\x12\xdd\xac\xdd\x14\xf6\x0b\x2f\x91\x10\x6b\x60\xb2\xe3\x0d\x16\x71\x22\x5d\x19\xe3\xde\xba\x6b\x0a\x5b\x66\xd3\x99\x35\xc1\xde\xf7\x52\x40\x22\x64\x35\xa5\x9e\x86\x62\xe0\x26\xd1\x40\x46\xfe\x0e\xfb\x9f\x15\x68\x3d\x05\xc7\x10\x59\x29\xb0\x35\x32\xff\x84\x60\x3d\x38\x6c\xd1\xf9\xbf\x23\xee\x41\x16\x04\xac\xf9\x7c\x4d\xa6\x9e\x2e\xb9\x85\xfd\x8f\xb2\x04\x92\x65\xe4\xf2\x35\xf9\xf6\xdb\x9e\x3f\x29\x8c\x12\x08\xef\x71\xa3\x41\xf5\x3f\x03\xea\x66\x11\xee\xbd\xdb\x70\x46\xed\x6a\x04\x46\x13\x10\xc8\x36\x24\x14\x3c\x68\x65\x55\x1d\xfc\x04\x3b\xf2\x1f\xc8\xdf\xe3\x0a\xcc\xd4\xf9\x6a\x36\x1c\x23\xaf\x6c\xa1\x79\x60\xfe\xd8\x7e\x5c\x34\x50\x18\x28\xb1\xe3\x10\x4a\xe6\x64\x00\x71\xe9\xd0\xe3\x14\x42\x6a\x08\x81\xe0\x3c\x92\xf5\x9f\xa3\x2f\xc9\xd4\xe2\x01\xa6\x0f\xfa\x61\x4e\xe8\x8c\x9e\xc0\xd6\x68\x0c\xab\x1e\x03\xb6\x0e\xf7\xde\xfe\xdb\xfb\x7f\xbe\x4b\x5a\x3b\x8a\x4f\x21\xb1\x41\x9f\x2d\x4f\x05\x57\x12\x5b\x1f\x9d\x3b\x4a\x6d\x14\xa6\x34\x5f\xef\xa7\xc8\x3e\x73\xb4\x7a\xc7\x4d\xb1\x21\x76\xe3\x03\xd5\x06\x05\xd2\x9b\xde\xfd\x05\x43\xb3\x68\x05\x4d\x5c\xe2\xa8\x4b\x17\x76\xef\xe8\xfb\x0a\xcc\x1f\x05\xd8\xd7\x1f\xf6\x7f\x2d\xa7\x54\xf3\x7a\x18\x2d\xe8\x2c\x61\xa8\xf0\xd6\xe9\xce\x84\x76\xd1\xf7\xf1\x77\x62\x40\x29\x7a\x43\xbe\xf2\x89\xdc\x0b\x7b\x0a\xb9\x4f\x83\xd8\xaa\x42\xe7\x41\x42\xcf\x12\x27\xef\x2f\xff\xfe\xc7\x4f\x83\x33\x46\x26\xf6\xa2\x66\x5e\xfe\xfd\x58\x8b\x5a\x57\x8f\x68\x61\x7d\x6b\xab\xcf\x16\xd5\xaa\x55\x40\x5c\x81\x66\x1f\x5d\x49\xc6\x4c\xf0\x0a\xdb\x88\xbd\x4f\x3e\xd2\x6b\xba\x3c\xf2\x20\x1a\xb2\xd8\x1c\xc6\x37\x6c\x86\x82\x9b\x29\xfd\xd8\xd0\x5e\x76\xb4\x96\x8a\x4c\xb9\xab\x40\xc2\xc9\xca\xd2\x27\x02\x9a\xca\x6c\x70\x3d\x9f\xa3\x7c\xe2\x09\x23\x27\x7d\x9e\x59\x8a\x0f\xfc\xc6\xa6\xc6\x2a\x57\x07\x59\xde\x88\x03\x11\x5d\xa5\xa8\xe4\x35\xfd\x8d\x5c\x68\x61\x43\x67\xe5\x0a\xd8\xed\xf2\x98\x0c\xad\x90\xe6\x79\xd9\x30\x08\x74\x1c\x4f\x48\xf4\x79\xb7\xc5\x50\x2c\xc7\x12\xef\x6d\x31\x60\xc1\x4f\x0e\x7d\x67\xd4\x0e\x6c\xbc\x02\xd0\xf9\x7c\x39\xf9\x9f\x73\xd3\xa8\xce\xa6\xa6\x0d\x9f\xad\x1d\xdc\xb1\x49\x40\x9b\xae\xfe\x05\xaf\x37\xa5\xe9\x82\xbc\xeb\xea\x1c\xd4\xf4\x2c\x32\xd2\xc6\x9e\x76\x96\x6c\x19\x5e\xf4\xb3\x57\x03\x44\xc1\x54\x8e\x85\xf8\x4c\x90\x81\x7a\x04\xa3\x01\xca\x67\xf0\x3b\xb2\x81\xd1\x75\xc8\x51\x07\xb0\xb6\x3d\xd2\x02\x5c\xbb\x98\x0d\xf6\xf3\x2d\x9a\x7f\x90\x50\x60\x14\x0c\xf4\x42\x10\x81\x6f\x5d\x22\xdb\x3b\xd7\x5d\x23\xc7\xf8\x2a\xb0\x33\x63\x6c\x7b\x59\x10\x8e\x9e\x34\x88\x33\x5d\x6d\xae\x08\x2f\xb1\x90\x1e\xb0\x86\xc9\x31\xa7\x58\x57\xef\xf1\x0f\xbf\x60\x2e\xe6\x31\x39\x41\x76\xf5\x90\x6e\xae\x6c\x41\x78\xd5\x2b\xd7\xc5\xcf\xa9\xde\x3a\xc5\x91\xe6\x54\x71\x57\x09\x63\xec\x01\xd1\xe6\xec\xaf\x42\x5a\xa2\x53\x4c\x9f\xec\xa7\xa0\xce\x17\x38\x0e\x41\x53\xfe\xb8\xe1\xa2\x9c\xa2\xe8\xd9\x23\xdb\x96\x7b\x36\xe8\x80\x29\xab\x43\x1d\xce\x16\x18\x12\x3a\x7d\x2c\x03\x7a\x5c\x83\x32\x3f\x00\x76\x1b\x98\x22\xfe\x2b\x87\x93\x14\x16\xff\x1d\x5e\x34\xfa\xc3\xc5\xcd\xf1\x0a\xd4\x28\x7a\x7a\x26\x2b\xee\x27\xc1\x37\x0d\x9c\x53\xfc\xe7\x1f\x7c\x73\x43\x59\xd7\xe0\x55\x2b\xc5\x16\x4a\x3f\xd3\x9f\x1f\x46\xd7\xfc\xae\x27\x1a\xa8\xfa\x49\xf7\xda\x95\xfb\xea\xe1\x08\x6a\xdf\x33\xca\x94\x92\xbb\xd8\x8e\x53\xf6\xeb\xca\x03\xaa\x9e\xdb\xa6\x6d\x21\x98\xd6\x19\xed\xe7\x4f\x37\x3e\xd3\x6b\xdd\xc4\xeb\xfe\xe3\x13\xd2\xfc\x8a\x2c\x0d\x4c\x15\x9b\xa7\xe4\x9c\xe3\xac\xd1\xcf\xf1\x16\x5d\x7e\x9e\x79\x95\x9e\x98\xed\x7d\x11\x68\x3e\x4c\xb1\xa3\xd4\xc4\x4b\x9d\xd5\x9a\x3e\xb4\xd3\x4f\xb5\xfd\x41\xf4\xb3\x00\xdb\x98\x75\x0b\x05\x46\x8f\x98\x0d\xd8\x88\x0f\xd5\xe3\x40\xc0\xb6\xa7\x24\x49\x3c\x83\xbd\x4b\xfa\xb7\xb3\xa0\x07\x7b\xdd\x78\x8e\x45\x1b\xb4\x39\x22\x58\x6e\xff\x2b\x7e\x4d\xfa\xb5\xeb\x3a\x19\xbd\xbc\xc0\x5f\xe0\x05\xcb\xfa\x24\xdc\xd0\xf0\x06\xc0\x6f\x88\xdf\x21\x0c\xff\xbb\x1d\x71\xbf\x7f\x36\xa8\xeb\x82\x03\x9a\x5f\x0c\xba\x5d\xbd\x7e\xf3\x38\x4a\x90\x1d\xa1\x67\xbc\x3b\x4e\x24\xf5\x81\xf7\x63\xff\x31\x76\x7e\xf8\xa7\xc4\xce\x81\xbc\xb8\xcd\xe8\xe8\x9a\xa2\x5e\xb5\x21\xb2\x82\xe1\x65\x86\x99\xf6\x93\x7b\x06\xa1\x5a\x8d\xbe\x43\x1d\x24\xe7\xa7\x4a\xf4\xb7\x18\x61\xc2\x64\xf4\x5f\x5d\xd3\x60\xd9\x06\x30\x18\xe6\x5e\x62\x70\xe3\x1d\x2c\xef\x37\x0e\x90\x36\x01\x46\xea\xd9\x5e\x72\x38\x0d\x5d\x93\x86\x1e\x39\x9e\xf4\x6f\x93\x63\x96\x3f\xd2\x02\x5c\xc6\xaf\x52\xdb\x37\xec\xff\x9c\xd4\x7f\x51\xfe\x6f\x00\x00\x00\xff\xff\x45\x71\xb2\xd1\x6a\x16\x00\x00")

func index_html_bytes() ([]byte, error) {
	return bindata_read(
		_index_html,
		"index.html",
	)
}

func index_html() (*asset, error) {
	bytes, err := index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "index.html", size: 5738, mode: os.FileMode(420), modTime: time.Unix(1455126074, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".index.html.swp": index_html_swp,
	"index.html": index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	".index.html.swp": &_bintree_t{index_html_swp, map[string]*_bintree_t{
	}},
	"index.html": &_bintree_t{index_html, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

